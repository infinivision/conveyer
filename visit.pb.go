// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: visit.proto

/*
	Package main is a generated protocol buffer package.

	It is generated from these files:
		visit.proto

	It has these top-level messages:
		Visit
*/
package main

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Visit struct {
	Uid       uint64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	VisitTime uint64 `protobuf:"varint,2,opt,name=VisitTime,proto3" json:"VisitTime,omitempty"`
	Location  uint64 `protobuf:"varint,3,opt,name=Location,proto3" json:"Location,omitempty"`
	Age       uint32 `protobuf:"varint,4,opt,name=Age,proto3" json:"Age,omitempty"`
	IsMale    bool   `protobuf:"varint,5,opt,name=IsMale,proto3" json:"IsMale,omitempty"`
}

func (m *Visit) Reset()                    { *m = Visit{} }
func (*Visit) ProtoMessage()               {}
func (*Visit) Descriptor() ([]byte, []int) { return fileDescriptorVisit, []int{0} }

func init() {
	proto.RegisterType((*Visit)(nil), "main.Visit")
}
func (this *Visit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Visit)
	if !ok {
		that2, ok := that.(Visit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.VisitTime != that1.VisitTime {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	if this.Age != that1.Age {
		return false
	}
	if this.IsMale != that1.IsMale {
		return false
	}
	return true
}
func (this *Visit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&main.Visit{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "VisitTime: "+fmt.Sprintf("%#v", this.VisitTime)+",\n")
	s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	s = append(s, "Age: "+fmt.Sprintf("%#v", this.Age)+",\n")
	s = append(s, "IsMale: "+fmt.Sprintf("%#v", this.IsMale)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVisit(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Visit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Visit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVisit(dAtA, i, uint64(m.Uid))
	}
	if m.VisitTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVisit(dAtA, i, uint64(m.VisitTime))
	}
	if m.Location != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVisit(dAtA, i, uint64(m.Location))
	}
	if m.Age != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVisit(dAtA, i, uint64(m.Age))
	}
	if m.IsMale {
		dAtA[i] = 0x28
		i++
		if m.IsMale {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintVisit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Visit) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovVisit(uint64(m.Uid))
	}
	if m.VisitTime != 0 {
		n += 1 + sovVisit(uint64(m.VisitTime))
	}
	if m.Location != 0 {
		n += 1 + sovVisit(uint64(m.Location))
	}
	if m.Age != 0 {
		n += 1 + sovVisit(uint64(m.Age))
	}
	if m.IsMale {
		n += 2
	}
	return n
}

func sovVisit(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVisit(x uint64) (n int) {
	return sovVisit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Visit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Visit{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`VisitTime:` + fmt.Sprintf("%v", this.VisitTime) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`Age:` + fmt.Sprintf("%v", this.Age) + `,`,
		`IsMale:` + fmt.Sprintf("%v", this.IsMale) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVisit(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Visit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVisit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Visit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Visit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitTime", wireType)
			}
			m.VisitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisitTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMale = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVisit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVisit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVisit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVisit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVisit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVisit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVisit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVisit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVisit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVisit   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("visit.proto", fileDescriptorVisit) }

var fileDescriptorVisit = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xcb, 0x2c, 0xce,
	0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x93, 0x12, 0x49,
	0xcf, 0x4f, 0xcf, 0x07, 0x0b, 0xe8, 0x83, 0x58, 0x10, 0x39, 0xa5, 0x5a, 0x2e, 0xd6, 0x30, 0x90,
	0x52, 0x21, 0x01, 0x2e, 0xe6, 0xd0, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x10,
	0x53, 0x48, 0x86, 0x8b, 0x13, 0x2c, 0x15, 0x92, 0x99, 0x9b, 0x2a, 0xc1, 0x04, 0x16, 0x47, 0x08,
	0x08, 0x49, 0x71, 0x71, 0xf8, 0xe4, 0x27, 0x27, 0x96, 0x64, 0xe6, 0xe7, 0x49, 0x30, 0x83, 0x25,
	0xe1, 0x7c, 0x90, 0x59, 0x8e, 0xe9, 0xa9, 0x12, 0x2c, 0x0a, 0x8c, 0x1a, 0xbc, 0x41, 0x20, 0xa6,
	0x90, 0x18, 0x17, 0x9b, 0x67, 0xb1, 0x6f, 0x62, 0x4e, 0xaa, 0x04, 0xab, 0x02, 0xa3, 0x06, 0x47,
	0x10, 0x94, 0xe7, 0x64, 0x70, 0xe2, 0xa1, 0x1c, 0xc3, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca,
	0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f,
	0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f,
	0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0xbb, 0xdb, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0xf8, 0xec, 0xf5, 0x95, 0xe2, 0x00, 0x00, 0x00,
}
